#!/bin/bash
# ~/.config/yadm/bootstrap
#
# yadm bootstrap script for Arch Linux setup
# This script sets up a complete desktop environment with Hyprland

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_section() {
    echo -e "\n${BLUE}==>${NC} ${GREEN}$1${NC}"
}

print_warning() {
    echo -e "${YELLOW}Warning:${NC} $1"
}

print_error() {
    echo -e "${RED}Error:${NC} $1"
}

print_info() {
    echo -e "${BLUE}Info:${NC} $1"
}

# Function to install packages
install_packages() {
    print_section "Installing $1 packages"
    shift
    
    # Check which packages are already installed
    local to_install=()
    for pkg in "$@"; do
        if ! pacman -Qi "$pkg" &>/dev/null; then
            to_install+=("$pkg")
        fi
    done
    
    if [ ${#to_install[@]} -eq 0 ]; then
        print_info "All packages already installed."
        return
    fi
    
    print_info "Installing: ${to_install[@]}"
    sudo pacman -S --needed --noconfirm "${to_install[@]}"
}

# Function to install AUR packages
install_aur_packages() {
    print_section "Installing AUR packages"
    
    # Check if yay is installed, install if not
    if ! command -v yay &>/dev/null; then
        print_info "Installing yay AUR helper..."
        git clone https://aur.archlinux.org/yay.git /tmp/yay
        (cd /tmp/yay && makepkg -si --noconfirm)
        rm -rf /tmp/yay
    fi
    
    # Install AUR packages
    print_info "Installing AUR packages..."
    yay -S --needed --noconfirm resvg syshud otf-apple-pingfang ttf-apple-emoji
}

# Check system
check_system() {
    print_section "Checking system"
    
    if [ -f /etc/arch-release ]; then
        print_info "Arch Linux detected. Proceeding..."
    else
        print_error "This script is intended for Arch Linux. Aborting."
        exit 1
    fi
}

# Setup Fonts
setup_fonts() {
    print_section "Setting up fonts"
    
    # Refresh font cache
    fc-cache -fv
    
    # Set default fonts
    mkdir -p ~/.config/fontconfig
    
    cat > ~/.config/fontconfig/fonts.conf << 'EOL'
<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
  <alias>
    <family>sans-serif</family>
    <prefer>
      <family>PingFang SC</family>
      <family>Inter</family>
      <family>Noto Sans</family>
    </prefer>
  </alias>
  <alias>
    <family>serif</family>
    <prefer>
      <family>Noto Serif</family>
    </prefer>
  </alias>
  <alias>
    <family>monospace</family>
    <prefer>
      <family>Maple Mono</family>
      <family>Noto Sans Mono</family>
    </prefer>
  </alias>
</fontconfig>
EOL
}

# Setup ZSH
setup_zsh() {
    print_section "Setting up ZSH"
    
    # Change shell to zsh if not already
    if [[ $SHELL != *"zsh"* ]]; then
        print_info "Changing shell to ZSH"
        chsh -s $(which zsh)
    fi
    
    # Setup Oh-My-Zsh if not already installed
    if [ ! -d ~/.oh-my-zsh ]; then
        print_info "Installing Oh-My-Zsh"
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    fi
    
    # Install plugins
    ZSH_CUSTOM=${ZSH_CUSTOM:-~/.oh-my-zsh/custom}
    
    if [ ! -d ${ZSH_CUSTOM}/plugins/zsh-autosuggestions ]; then
        print_info "Installing zsh-autosuggestions"
        git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM}/plugins/zsh-autosuggestions
    fi
    
    if [ ! -d ${ZSH_CUSTOM}/plugins/zsh-syntax-highlighting ]; then
        print_info "Installing zsh-syntax-highlighting"
        git clone https://github.com/zsh-users/zsh-syntax-highlighting ${ZSH_CUSTOM}/plugins/zsh-syntax-highlighting
    fi
    
    # Setup zoxide
    if command -v zoxide &>/dev/null; then
        print_info "Setting up zoxide for ZSH"
        zoxide init zsh > ~/.zoxide.zsh
    fi
}

# Setup Neovim
setup_neovim() {
    print_section "Setting up Neovim"
    
    # Clone or update Neovim config if it's a submodule
    if [ -f ~/.config/nvim/.git ]; then
        print_info "Updating Neovim configuration"
        git -C ~/.config/nvim pull
    fi
    
    # Install packer.nvim if not already installed
    if [ ! -d ~/.local/share/nvim/site/pack/packer/start/packer.nvim ]; then
        print_info "Installing packer.nvim"
        git clone --depth 1 https://github.com/wbthomason/packer.nvim \
            ~/.local/share/nvim/site/pack/packer/start/packer.nvim
    fi
    
    # Install Node.js packages for LSP support
    npm install -g neovim prettier typescript typescript-language-server pyright
}

# Setup Fcitx5
setup_fcitx5() {
    print_section "Setting up Fcitx5"
    
    # Configure environment variables
    mkdir -p ~/.pam_environment
    cat > ~/.pam_environment << 'EOL'
GTK_IM_MODULE=fcitx
QT_IM_MODULE=fcitx
XMODIFIERS=@im=fcitx
SDL_IM_MODULE=fcitx
GLFW_IM_MODULE=ibus
EOL

    # Auto-start fcitx5
    mkdir -p ~/.config/autostart
    cp /usr/share/applications/fcitx5.desktop ~/.config/autostart/
    
    # Setup fcitx5-rime if needed
    if [ ! -d ~/.local/share/fcitx5/rime ]; then
        print_info "Creating fcitx5-rime config directory"
        mkdir -p ~/.local/share/fcitx5/rime
    fi
}

# Setup Hyprland
setup_hyprland() {
    print_section "Setting up Hyprland"
    
    # Ensure Hyprland autostart directory exists
    mkdir -p ~/.config/hypr
    
    # Enable important services
    print_info "Enabling systemd services"
    systemctl --user enable pipewire.service pipewire-pulse.service wireplumber.service
    
    # Create polkit agent autostart
    mkdir -p ~/.config/hypr/autostart
    
    cat > ~/.config/hypr/autostart/polkit.sh << 'EOL'
#!/bin/bash
/usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 &
EOL
    chmod +x ~/.config/hypr/autostart/polkit.sh
    
    # Create clipboard manager autostart
    cat > ~/.config/hypr/autostart/clipboard.sh << 'EOL'
#!/bin/bash
wl-paste --watch cliphist store &
EOL
    chmod +x ~/.config/hypr/autostart/clipboard.sh
}

# Main installation function
main() {
    check_system
    
    # System packages
    install_packages "Audio" pipewire pipewire-alsa pipewire-audio pipewire-jack pipewire-pulse gst-plugin-pipewire wireplumber pavucontrol pamixer
    
    install_packages "Desktop environment" hyprland hypridle hyprlock hyprpaper xdg-desktop-portal-hyprland xdg-desktop-portal-gtk waybar rofi-wayland dunst cliphist wl-clipboard polkit-gnome
    
    install_packages "File managers" dolphin thunar arka thunar-archive-plugin gvfs
    
    install_packages "Applications" firefox kitty xorg-xrdb 
    
    install_packages "Input methods" fcitx5-rime fcitx5-im
    
    install_packages "Development tools" zsh bat lsd fd ripgrep fzf yazi neovim nodejs npm
    
    install_packages "Utilities" sox yad libnotify ffmpeg p7zip jq poppler imagemagick unzip zoxide
    
    install_packages "Qt/GTK integration" nwg-lock nwg-displays qt5-wayland qt6-wayland kvantum qt5ct qt6ct
    
    install_packages "Fonts" inter-font noto-fonts ttf-maplemono
    
    # Install AUR packages
    install_aur_packages
    
    # Setup components
    setup_fonts
    setup_zsh
    setup_neovim
    setup_fcitx5
    setup_hyprland
    
    print_section "Bootstrap completed successfully!"
    print_info "Please reboot your system to apply all changes."
}

# Run main function
main